# _*_coding:utf-8 _*_
# @Time    : 2021/4/21 9:25
# @Author  : Guo 
# @File    : 91. 解码方法.py
# @Desc    : https://leetcode-cn.com/problems/decode-ways/
"""
一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：
'A' -> 1
'B' -> 2
...
'Z' -> 26
要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：
"AAJF" ，将消息分组为 (1 1 10 6)
"KJF" ，将消息分组为 (11 10 6)
注意，消息不能分组为  (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。
给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。
题目数据保证答案肯定是一个 32 位 的整数。

示例 1：
输入：s = "12"
输出：2
解释：它可以解码为 "AB"（1 2）或者 "L"（12）。
"""


class Solution:
    def numDecodings(self, s) -> int:
        """
        dp
        dp[i] 表示当前字符截至的解码数
        如果只是用当前字符，且当前字符不为0 则 dp[i] += dp[i-1]
        如果当前字符作为末尾，且前字符不为0，且合起来是1-26之间的数字，dp[i] += dp[i-2]
        dp[i] = dp[i-1] + dp[i-2]
        所以dp[i]的数目是上述两种情况相加
        """
        n = len(s)
        dp = [1] + [0] * n  # 表明空字符串可以是一种解法
        for i in range(1, n + 1):
            if s[i - 1] != "0":  # 由于索引都+1，所以在查字符时候需要-1
                dp[i] += dp[i - 1]
            if i > 1 and s[i - 2] != "0" and int(s[i - 2:i]) <= 26:
                dp[i] += dp[i - 2]

        return dp[n]